/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graphtutorial;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.InputMismatchException;
import java.util.Properties;
import java.util.Scanner;

import com.microsoft.graph.models.Attendee;
import com.microsoft.graph.models.Event;
import com.microsoft.graph.models.User;
import com.microsoft.graph.requests.EventCollectionPage;
import com.microsoft.graph.requests.UserCollectionPage;

public class App {

    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println("Java Graph Tutorial");
        System.out.println();

        final Properties oAuthProperties = new Properties();
        try {
            oAuthProperties.load(App.class.getResourceAsStream("oAuth.properties"));
        } catch (IOException e) {
            System.out.println(
                    "Unable to read OAuth configuration. Make sure you have a properly formatted oAuth.properties file. See README for details.");
            return;
        }

        initializeGraph(oAuthProperties);     

        Scanner input = new Scanner(System.in);

        int choice = -1;

        while (choice != 0) {
            System.out.println("Please choose one of the following options:");
            System.out.println("0. Exit");            
            System.out.println("1. List users (required app-only)");
            System.out.println("2. Get Calendar Events (required app-only)");
            System.out.println("3. Make a Graph call (Not Implemented)");

            try {
                choice = input.nextInt();
            } catch (InputMismatchException ex) {
                // Skip over non-integer input
            }

            input.nextLine();

            // Process user choice
            switch (choice) {
                case 0:
                    // Exit the program
                    System.out.println("Goodbye...");
                    break;                                
                case 1:
                    // List users
                    listUsers();
                    break;
                case 2:
                    // List events
                    listEvents(input);
                    break;
                case 3:
                    // Run any Graph code
                    makeGraphCall();
                    break;
                default:
                    System.out.println("Invalid choice");
            }
        }

        input.close();
    }

    private static void initializeGraph(Properties properties) {
        try {
            Graph.initializeGraphForAppAuth(properties, challenge -> System.out.println(challenge.getMessage()));            
        } catch (Exception e) {
            System.out.println("Error initializing Graph for user auth");
            System.out.println(e.getMessage());
        }
    }    

    private static void listUsers() {
        try {
            final UserCollectionPage users = Graph.getUsers();
    
            // Output each user's details
            for (User user: users.getCurrentPage()) {
                System.out.println("User: " + user.displayName);
                System.out.println("  ID: " + user.id);
                System.out.println("  Email: " + user.mail);
            }
    
            final Boolean moreUsersAvailable = users.getNextPage() != null;
            System.out.println("\nMore users available? " + moreUsersAvailable);
        } catch (Exception e) {
            System.out.println("Error getting users");
            System.out.println(e.getMessage());
        }
    }

    private static void listEvents(Scanner input) {
        try {            

            String userId = null;
            String dateTimeStr = null;
            LocalDateTime startDateTime = null;
            LocalDateTime endDateTime = null;
            
            //Ask value for param UserID
            System.out.print("userId ? ");                        
            userId = input.next();            
            input.nextLine();

            //Ask value for param startDateTime              
            do {
                System.out.print("startDateTime (ISO 8601) ? ");          
                dateTimeStr = input.next();
                try{
                    startDateTime = LocalDateTime.parse(dateTimeStr, DateTimeFormatter.ISO_DATE_TIME);
                } catch (DateTimeParseException ex) {
                    System.err.println("Wrong DateTime. Use format ISO 8601 (Example : 2022-06-20T00:00:00)");            
                }
            } while (startDateTime == null);

            //Ask value for param endDateTime                      
            do {
                System.out.print("endDateTime (ISO 8601) ? ");  
                dateTimeStr = input.next();
                try{
                    endDateTime = LocalDateTime.parse(dateTimeStr, DateTimeFormatter.ISO_DATE_TIME);
                } catch (DateTimeParseException ex) {
                    System.err.println("Wrong DateTime. Use format ISO 8601 (Example : 2022-06-26T23:59:59)");;            
                }
            } while (endDateTime == null);
                                              
            final EventCollectionPage events = Graph.getCalendarEvents(userId,startDateTime,endDateTime);
            
            for (Event event: events.getCurrentPage()) {
              LocalDateTime startDateTimeEv = LocalDateTime.parse(event.start.dateTime,DateTimeFormatter.ISO_DATE_TIME);
              LocalDateTime endDateTimeEv = LocalDateTime.parse(event.end.dateTime,DateTimeFormatter.ISO_DATE_TIME);
              System.out.println("Event " + event.subject + " from " + startDateTimeEv.format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")) + " to " + endDateTimeEv.format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")));
              for (Attendee attendee : event.attendees) {
                System.out.println("\t - Attendee : " + attendee.emailAddress.name + " (" + attendee.emailAddress.address + ")");
              }              
            }

            final Boolean moreEventsAvailable = events.getNextPage() != null;
            System.out.println("\nMore events available? " + moreEventsAvailable);

        } catch (Exception e) {
            System.out.println("Error getting events");
            System.out.println(e.getMessage());
        }
    }

    private static void makeGraphCall() {
        // TODO
    }
}
